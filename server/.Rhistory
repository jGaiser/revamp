source("pepnetfunctions.R")
library(plyr)
library(RCy3)
library(gplots)
library(igraph)
localpath = paste(getwd(), '/', sep='')
objectkey = read.table(paste(localpath, "DataObjectKey.txt", sep=""), sep="\t", stringsAsFactors=FALSE)
objectkey = objectkey[,c(1,3)]
localpath = paste(getwd(), '/', sep='')
objectkey = read.table(paste(localpath, "DataObjectKey.txt", sep=""), sep="\t", stringsAsFactors=FALSE)
objectkey = objectkey[,c(1,3)]
names(objectkey) = c("data.object", "description")
load(file=paste(localpath, "LC_TMT_Nets.RData", sep=""))
load(file=paste(localpath, "LC_TMT_Functions.RData", sep=""))
load(file="protein_families.RData")
source("MGRCyFunctions.R")
source("MGFunctions.R")
source("pepnetfunctions.R")
source("pepnetfunctions.R")
bromodomainPs <- c("ASH1L", "ATAD2", "ATAD2B", "BAZ1A", "BAZ1B", "BAZ2A", "BAZ2B", "BPTF", "BRD1", "BRD2", "BRD3", "BRD4", "BRD7", "BRD8", "BRD9", "BRDT", "BRPF1", "BRPF3", "BRWD1", "BRWD3", "CECR2", "CREBBP", "EP300", "KAT2A", "KAT2B", "KIAA2026", "KMT2A", "PBRM1", "PHIP", "SMARCA2", "SMARCA4", "SP110", "SP140", "SP140L", "TAF1", "TAF1L", "TRIM24", "TRIM28", "TRIM33", "TRIM66", "ZMYND11", "ZMYND8")
bromos <- func.key[grep("BROMO", func.key$Domains), "Gene.Name"]
bromos
bromoPs
bromos
bromodomainPs
bromoPs
# stepwise: hypothetical pathway analysis
# Retrieve in sets, e.g. RTKs -> adaptors -> kinases -> nuclear proteins
#genes=pd1genes
#genes[genes %in% rtklist]
#edgefile <- pd4.ppi
#edgefile <-  pd3.criz.sgp
#genes <- pd3.criz.sgp
#
rtk.pep.net <- function (genes, degree=2, edgefile, lincs=lincs, selectededges.df=selectededges.df) {
genes <- unique(genes)
rtks <- genes[genes %in% rtklist]
if(length(rtks)>0) {
rtkpeps <- lincs[lincs$Gene.Name %in% rtks, "Peptide.Name"]
deg1.net <- filter.edges.1(rtks, edgefile)
neighbors <- unique(c(as.character(deg1.net$Gene.1), as.character(deg1.net$Gene.2)))	 %w/o% rtks
neighborpeps <- lincs[lincs$Gene.Name %in% neighbors, "Peptide.Name"]
rtkpepedges <- filter.edges.1(rtkpeps, selectededges.df)
nbrpepedges <- filter.edges.1(neighborpeps, selectededges.df)
deg1.pepedges <- filter.edges.0(c(rtkpeps, neighborpeps), rbind(rtkpepedges, nbrpepedges))
}
if(degree > 1) {
deg2.net <- filter.edges.1(neighbors, edgefile)
deg2.net <- deg2.net[deg2.net$Gene.1 %in% (deg2.net$Gene.1 %w/o% rtks),]
deg2.net <- deg2.net[deg2.net$Gene.2 %in% (deg2.net$Gene.2 %w/o% rtks),]
neighbors2 <- unique(c(deg2.net$Gene.1, deg2.net$Gene.2)) %w/o% neighbors
if (length(neighbors2)>0) {
neighbor2peps <- lincs[lincs$Gene.Name %in% neighbors2, "Peptide.Name"]
nbr2pepedges <- filter.edges.1(neighbor2peps, selectededges.df)
deg2.pepedges <- filter.edges.0(c(neighborpeps, neighbor2peps), rbind(nbr2pepedges, nbrpepedges))
deg12pepedges <- unique(rbind(deg1.pepedges, deg2.pepedges))
return(deg12pepedges) }} else return(deg1.pepedges)
}
# END rtk.pep.net
#
# Function to use startgenes instead of, or in addition to, RTKs
#
#
start.pep.net <- function (genes, startgenes, degree=2, edgefile, lincs=lincs, selectededges.df=selectededges.df) {
genes <- unique(genes)
if(length(startgenes)>0) {
startpeps <- lincs[lincs$Gene.Name %in% startgenes, "Peptide.Name"]
deg1.net <- filter.edges.1(startgenes, edgefile)
neighbors <- unique(c(as.character(deg1.net$Gene.1), as.character(deg1.net$Gene.2)))	 %w/o% startgenes
neighborpeps <- lincs[lincs$Gene.Name %in% neighbors, "Peptide.Name"]
startpepedges <- filter.edges.1(startpeps, selectededges.df)
nbrpepedges <- filter.edges.1(neighborpeps, selectededges.df)
deg1.pepedges <- filter.edges.0(c(startpeps, neighborpeps), rbind(startpepedges, nbrpepedges))
}
if(degree > 1) {
deg2.net <- filter.edges.1(neighbors, edgefile)
deg2.net <- deg2.net[deg2.net$Gene.1 %in% (deg2.net$Gene.1 %w/o% startgenes),]
deg2.net <- deg2.net[deg2.net$Gene.2 %in% (deg2.net$Gene.2 %w/o% startgenes),]
neighbors2 <- unique(c(as.character(deg2.net$Gene.1), as.character(deg2.net$Gene.2))) %w/o% neighbors
if (length(neighbors2)>0) {
neighbor2peps <- lincs[lincs$Gene.Name %in% neighbors2, "Peptide.Name"]
nbr2pepedges <- filter.edges.1(neighbor2peps, selectededges.df)
deg2.pepedges <- filter.edges.0(c(neighborpeps, neighbor2peps), rbind(nbr2pepedges, nbrpepedges))
deg12pepedges <- unique(rbind(deg1.pepedges, deg2.pepedges))
return(deg12pepedges) }} else return(deg1.pepedges)
}
# END start.pep.net
# To find more than just a single shortest path:
all.paths.net <- function (node1, node2, edgefile, extended=TRUE) {
node1.net=NULL; node2.net=NULL; node1.deg2.net=NULL; node2.deg2.net=NULL; node1.deg3.net=NULL; node2.deg3.net=NULL; node1.deg4.net=NULL; node2.deg4.net=NULL
node1.neighbors=NULL; node2.neighbors=NULL; node1.deg2.neighbors=NULL; node2.deg2.neighbors=NULL;
node1.deg3.neighbors=NULL; node2.deg3.neighbors=NULL; node1.deg4.neighbors=NULL; node2.deg4.neighbors=NULL;
common=NULL
if(length(extract.peptides(as.character(node1), edgefile))==0) {return(paste(node1, " is not in edge file!"))}
if(length(extract.peptides(as.character(node2), edgefile))==0) {return(paste(node2, " is not in edge file!"))}
node1.net <- filter.edges.1(as.character(node1), edgefile)
node1.neighbors <- unique(c(as.character(node1.net$Gene.1), as.character(node1.net$Gene.2))) %w/o% node1
node2.net <- filter.edges.1(as.character(node2), edgefile)
node2.neighbors <- unique(c(as.character(node2.net$Gene.1), as.character(node2.net$Gene.2))) %w/o% node2
common <- intersect(node1.neighbors, node2.neighbors)
if (length(intersect(node1.neighbors, node2.neighbors))==0){
node1.deg2.net <- filter.edges.1(node1.neighbors, edgefile)
node1.deg2.neighbors <- unique(c(as.character(node1.deg2.net$Gene.1), as.character(node1.deg2.net$Gene.2))) %w/o% node1.neighbors
node2.deg2.net <- filter.edges.1(node2.neighbors, edgefile)
node2.deg2.neighbors <- unique(c(as.character(node2.deg2.net$Gene.1), as.character(node2.deg2.net$Gene.2))) %w/o% node2.neighbors
common <- intersect(node1.deg2.neighbors, node2.deg2.neighbors)
} else {
if (length(intersect(node1.deg2.neighbors, node2.deg2.neighbors))==0){
# do it again
node1.deg3.net <- filter.edges.1(node1.deg2.neighbors, edgefile)
node1.deg3.neighbors <- unique(c(as.character(node1.deg3.net$Gene.1), as.character(node1.deg3.net$Gene.2))) %w/o% node1.deg2.neighbors
node2.deg3.net <- filter.edges.1(node2.deg2.neighbors, edgefile)
node2.deg3.neighbors <- unique(c(as.character(node2.deg3.net$Gene.1), as.character(node2.deg3.net$Gene.2))) %w/o% node2.deg2.neighbors
common <- intersect(node1.deg3.neighbors, node2.deg3.neighbors)
}  else {
if (length(intersect(node1.deg3.neighbors, node2.deg3.neighbors))==0){
# do it again
node1.deg4.net <- filter.edges.1(node1.deg3.neighbors, edgefile)
node1.deg4.neighbors <- unique(c(as.character(node1.deg4.net$Gene.1), as.character(node1.deg4.net$Gene.2))) %w/o% node1.deg3.neighbors
node2.deg4.net <- filter.edges.1(node2.deg3.neighbors, edgefile)
node2.deg4.neighbors <- unique(c(as.character(node2.deg4.net$Gene.1), as.character(node2.deg4.net$Gene.2))) %w/o% node2.deg3.neighbors
common <- intersect(node1.deg4.neighbors, node2.deg4.neighbors)
} else {
if (length(intersect(node1.deg4.neighbors, node2.deg4.neighbors))==0){
# do it again
node1.deg5.net <- filter.edges.1(node1.deg4.neighbors, edgefile)
node1.deg5.neighbors <- unique(c(as.character(node1.deg5.net$Gene.1), as.character(node1.deg5.net$Gene.2))) %w/o% node1.deg4.neighbors
node2.deg5.net <- filter.edges.1(node2.deg4.neighbors, edgefile)
node2.deg5.neighbors <- unique(c(as.character(node2.deg5.net$Gene.1), as.character(node2.deg5.net$Gene.2))) %w/o% node2.deg4.neighbors
common <- intersect(node1.deg4.neighbors, node2.deg4.neighbors)
}
}}}
if(length(common)==0) {return("Nodes did not connect at degree 5.")}
if (length(common)>0){
goodnodes <- c(node1, node2, intersect(node1.neighbors, node2.neighbors), intersect(node1.deg2.neighbors, node2.deg2.neighbors), intersect(node1.deg3.neighbors, node2.deg3.neighbors), intersect(node1.deg4.neighbors, node2.deg4.neighbors))
comb.net <- rbind(node1.net, node2.net, node1.deg2.net, node2.deg2.net, node1.deg3.net, node2.deg3.net, node1.deg4.net, node2.deg4.net)
comb.net <- comb.net[comb.net$Gene.1 %in% goodnodes | comb.net$Gene.2 %in% goodnodes,]
nodepath <- connectNodes(nodepair=(c(node1, node2)), edgefile=comb.net, newgraph=TRUE)
comb.path <- filter.edges.0 (nodepath[[2]], comb.net)
comb.path2 <- filter.edges.1 (goodnodes, comb.net)
}
if (extended==TRUE) {return(comb.path2)} else return(comb.path)
}
# end all.paths.net
#
# Problem (?) corr edges between ts factors and rtks are returned though no interactions are in ppi file
#
filter.path <- function(ppi.net, corr.net) {
edgefile=corr.net
edgefile$Gene.Name.1 <- sapply((as.character(edgefile$Gene.1)),  function (x) unlist(strsplit(x, " ",  fixed=TRUE))[1])
edgefile$Gene.Name.2 <- sapply((as.character(edgefile$Gene.2)),  function (x) unlist(strsplit(x, " ",  fixed=TRUE))[1])
# reverse order to included reversed ppi edges
edgefile$Gene.Name.1.R <- edgefile$Gene.Name.2
edgefile$Gene.Name.2.R <- edgefile$Gene.Name.1
edgefile $nodes.combined <- noquote(paste(edgefile $Gene.Name.1, edgefile $Gene.Name.2))
edgefile $nodes.reversed <- noquote(paste(edgefile $Gene.Name.2, edgefile $Gene.Name.1))
# make combined ppi column
ppi.net $nodes.combined <- noquote(paste(ppi.net $Gene.1, ppi.net $Gene.2))
# filter
edgefile.f1 <- edgefile[edgefile$nodes.combined %in% ppi.net$nodes.combined, ]
edgefile.f2 <- edgefile[edgefile$nodes.reversed %in% ppi.net$nodes.combined, ]
edgefile.f  <- unique(rbind(edgefile.f1, edgefile.f2))
return(edgefile.f[, 1:dim(corr.net)[2]])
}
# END filter.path
filter.ppi <- function(ppi.edges, corr.edges) {
corr.net=corr.edges
ppi.net=ppi.edges
# reverse order to included reversed ppi edges
corr.net $nodes.combined <- noquote(paste(corr.net $Gene.1, corr.net $Gene.2))
corr.net $nodes.reversed <- noquote(paste(corr.net $Gene.2, corr.net $Gene.1))
# make combined ppi column
ppi.net $nodes.combined <- noquote(paste(ppi.net $Gene.1, ppi.net $Gene.2))
# filter	ppis by corr edges
ppi.f1 <- ppi.net[ppi.net $nodes.combined %in% corr.net$nodes.combined, ]
ppi.f2 <- ppi.net[ppi.net $nodes.combined %in% corr.net$nodes.reversed, ]
ppi.f  <- unique(rbind(ppi.f1, ppi.f2))
return(ppi.f[, 1:dim(ppi.edges)[2]])
}
#
sel.edges
dualpack.neg.genes
essl.cfn
essl.cfn$Gene.1
essl.cfn$Gene.2
essl.cfn$Gene.1
essl.cfn$Gene.1
essl.cfn$Gene.2
essl.cfn$Gene.1 %in% bromodomainPs
essl.cfn$Gene.2
essl.cfn$Gene.1 %in% bromodomainPs
essl.cfn[essl.cfn$Gene.1 %in% bromodomainPs]
essl.cfn[essl.cfn$Gene.1 %in% bromodomainPs & essl.cfn$Gene.1 %in% dualpack.neg.genes]
dualbromo.net <- filter.edges.between(bromoPs, dualpack.neg.genes, essl.cfn)
dualbromo.net
bromodomainPs <- c("ASH1L", "ATAD2", "ATAD2B", "BAZ1A", "BAZ1B", "BAZ2A", "BAZ2B", "BPTF", "BRD1", "BRD2", "BRD3", "BRD4", "BRD7", "BRD8", "BRD9", "BRDT", "BRPF1", "BRPF3", "BRWD1", "BRWD3", "CECR2", "CREBBP", "EP300", "KAT2A", "KAT2B", "KIAA2026", "KMT2A", "PBRM1", "PHIP", "SMARCA2", "SMARCA4", "SP110", "SP140", "SP140L", "TAF1", "TAF1L", "TRIM24", "TRIM28", "TRIM33", "TRIM66", "ZMYND11", "ZMYND8")
bromos <- func.key[grep("BROMO", func.key$Domains), "Gene.Name"]
bromoPs <- sort(unique(c(bromos, bromodomainPs)))
# Identify interactions between dually modified proteins and acetyl-binding proteins
dualbromo.net <- filter.edges.between(bromoPs, dualpack.neg.genes, essl.cfn)
# Identify interactions between dually modified proteins and kinases, phosphatases
dualkin.net <- filter.edges.between(c(kins, phosphatases), dualpack.neg.genes, essl.cfn)
# Identify interactions between dually modified proteins and acetyltransferases, deacetylases
dualacetyl.net <- filter.edges.between(c(acetyltransferases, deacetylases), dualpack.neg.genes, essl.cfn)
# Identify interactions between dually modified  and proteins that bind phosphorylated tyrosine, serine, threonine
dualp_binding.net <- filter.edges.between(c(ptbPs, sh2list, pSbindingPs), dualpack.neg.genes, essl.cfn)
# This latter one is 312 edges. We will keep it simpler by not including these edges initially.
# Put the first three together to test the hypothesis that ki all these to look at nodes that interact
dual.net <- unique(rbind(dualbromo.net, dualacetyl.net, dualkin.net)) # 271 edges
# Simplify edges using mergeEdges
dual.net2 <- mergeEdges.dir(dual.net)  # now 198 edges
# Option: simplify further by removing interactions that are only genetic interactions, which may be indirect
dual.net3 <- dual.net2[-which(dual.net2$edgeType=="Genetic interactions"),]   # now 146 edges
# Note: we could have started with the CFN without genetic interactions (essl.cfn.nogen) but this way the genetic interactions are shown only along with other evidence for interactions.
# How many nodes are in this network?
# extract.gene.names(dual.net2) #$ 161
# extract.gene.names(dual.net3) #$ 122
dualbromkin.cf <- make.anynetcf(edge.df=dual.net2, data.file=ldgene.fc,  geneatts=essl.netatts, ptmcccnatts=essl.cccn.edges, func.key=func.key)
dualbromkin.cf
dualbromkin.g <- cyPlot(dualbromkin.cf, dual.net2)
dual.net2
dualbromkin.cf
dual.net2
BROMO_WINDOW <<- CytoscapeWindow("BromoDomainTemplate", dualbromkin.g)
BROMO_WINDOW <<- CytoscapeWindow("BromoDomainTemplate", dualbromkin.g)
displayGraph(BROMO_WINDOW)
layoutNetwork(BROMO_WINDOW, "genemania-force-directed")
edgeDprops(BROMO_WINDOW)
ratioprops(BROMO_WINDOW, dualbromkin.cf, "Total")
showGraphicsDetails(BROMO_WINDOW, TRUE)
nodeDprops.new(BROMO_WINDOW, dualbromkin.cf)
setEdgeWidths.log(BROMO_WINDOW, factor=1.2)
gm.layout.values <- getLayoutPropertyValue(cy, "genemania-force-directed", getLayoutPropertyNames(cy, "genemania-force-directed"))
setLayoutProperties(cy, "genemania-force-directed", list(numIterations=100, defaultSpringCoefficient=0.1, defaultSpringLength=50, minNodeMass=0.001, maxNodeMass=2000, midpointEdges=250, curveSteepness=7.0e-03, isDeterministic=1, singlePartition=0, ignoreHiddenElements=1))
layoutNetwork(BROMO_WINDOW, layout.name= "genemania-force-directed")
bromodomainPs <- c("ASH1L", "ATAD2", "ATAD2B", "BAZ1A", "BAZ1B", "BAZ2A", "BAZ2B", "BPTF", "BRD1", "BRD2", "BRD3", "BRD4", "BRD7", "BRD8", "BRD9", "BRDT", "BRPF1", "BRPF3", "BRWD1", "BRWD3", "CECR2", "CREBBP", "EP300", "KAT2A", "KAT2B", "KIAA2026", "KMT2A", "PBRM1", "PHIP", "SMARCA2", "SMARCA4", "SP110", "SP140", "SP140L", "TAF1", "TAF1L", "TRIM24", "TRIM28", "TRIM33", "TRIM66", "ZMYND11", "ZMYND8")
bromos <- func.key[grep("BROMO", func.key$Domains), "Gene.Name"]
bromoPs <- sort(unique(c(bromos, bromodomainPs)))
# Identify interactions between dually modified proteins and acetyl-binding proteins
dualbromo.net <- filter.edges.between(bromoPs, dualpack.neg.genes, essl.cfn)
# Identify interactions between dually modified proteins and kinases, phosphatases
dualkin.net <- filter.edges.between(c(kins, phosphatases), dualpack.neg.genes, essl.cfn)
# Identify interactions between dually modified proteins and acetyltransferases, deacetylases
dualacetyl.net <- filter.edges.between(c(acetyltransferases, deacetylases), dualpack.neg.genes, essl.cfn)
# Identify interactions between dually modified  and proteins that bind phosphorylated tyrosine, serine, threonine
dualp_binding.net <- filter.edges.between(c(ptbPs, sh2list, pSbindingPs), dualpack.neg.genes, essl.cfn)
# This latter one is 312 edges. We will keep it simpler by not including these edges initially.
# Put the first three together to test the hypothesis that ki all these to look at nodes that interact
dual.net <- unique(rbind(dualbromo.net, dualacetyl.net, dualkin.net)) # 271 edges
# Simplify edges using mergeEdges
dual.net2 <- mergeEdges.dir(dual.net)  # now 198 edges
# Option: simplify further by removing interactions that are only genetic interactions, which may be indirect
dual.net3 <- dual.net2[-which(dual.net2$edgeType=="Genetic interactions"),]   # now 146 edges
# Note: we could have started with the CFN without genetic interactions (essl.cfn.nogen) but this way the genetic interactions are shown only along with other evidence for interactions.
# How many nodes are in this network?
# extract.gene.names(dual.net2) #$ 161
# extract.gene.names(dual.net3) #$ 122
#
dualbromkin.cf <- make.anynetcf(edge.df=dual.net2, data.file=ldgene.fc,  geneatts=essl.netatts, ptmcccnatts=essl.cccn.edges, func.key=func.key)
dualbromkin.g <- cyPlot(dualbromkin.cf, dual.net2)
BROMO_WINDOW <<- CytoscapeWindow("BromoDomainTemplate", dualbromkin.g)
displayGraph(BROMO_WINDOW)
layoutNetwork(BROMO_WINDOW, "genemania-force-directed")
getWindowID(cy, "BromoDomainTemplate")
BROMO_WINDOW <<- existing.CytoscapeWindow("BromoDomainTemplate")
BROMO_WINDOW
BROMO_WINDOW$view.id
